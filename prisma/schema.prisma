// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    relationMode      = "prisma"
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Game {
    id               String           @id @default(cuid())
    name             String           @db.VarChar(191)
    description      String           @db.VarChar(191)
    cover_image      String           @db.VarChar(191)
    background_image String           @db.VarChar(191)
    release_date     DateTime         @default(now())
    franchiseId      String
    franchise        Franchise        @relation(fields: [franchiseId], references: [id], onDelete: Cascade)
    publisherId      String
    publisher        Publisher        @relation(fields: [publisherId], references: [id], onDelete: Cascade)
    developers       Developer[]
    genres           Genre[]
    platforms        GameToPlatform[]
    features         Feature[]
    reviews          Review[]

    @@index([publisherId])
    @@index([franchiseId])
}

model ReviewLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    reviewId  String
    review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([reviewId])
    @@index([userId])
}

model CommentLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    commentId String
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([commentId])
    @@index([userId])
}

model Comment {
    id        String        @id @default(cuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    reviewId  String
    review    Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    userId    String
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    content   String        @db.Text
    parentId  String?
    parent    Comment?      @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children  Comment[]     @relation("CommentToComment")
    likes     CommentLike[]

    @@index([reviewId])
    @@index([parentId])
    @@index([userId])
}

model Review {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    gameId    String
    game      Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
    userId    String
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    rating    Int?
    content   String       @db.Text
    comments  Comment[]
    likes     ReviewLike[]

    @@index([gameId])
    @@index([userId])
}

model Publisher {
    id          String @id @default(cuid())
    name        String @db.VarChar(191)
    description String @db.VarChar(191)
    cover_image String @db.VarChar(191)
    games       Game[]
}

model Feature {
    id          String @id @default(cuid())
    name        String @db.VarChar(191)
    description String @db.VarChar(191)
    cover_image String @db.VarChar(191)
    games       Game[]
}

model Platform {
    id          String           @id @default(cuid())
    name        String           @db.VarChar(192)
    description String           @db.VarChar(191)
    cover_image String           @db.VarChar(191)
    games       GameToPlatform[]
}

// The reason I added this model is because I wanted to add an online store link to the game for each platform
model GameToPlatform {
    id         Int      @id @default(autoincrement()) // Int is lighter on rights than cuid
    gameId     String
    platformId String
    game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
    platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
    store_link String   @db.VarChar(191)

    @@index([gameId])
    @@index([platformId])
}

model Developer {
    id          String @id @default(cuid())
    name        String @db.VarChar(191)
    description String @db.VarChar(191)
    cover_image String @db.VarChar(191)
    games       Game[]
}

model Genre {
    id          String @id @default(cuid())
    name        String @db.VarChar(191)
    description String @db.VarChar(191)
    games       Game[]
}

model Franchise {
    id               String @id @default(cuid())
    name             String @db.VarChar(191)
    description      String @db.VarChar(191)
    background_image String @db.VarChar(191)
    games            Game[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    reviews       Review[]
    commments     Comment[]
    comment_likes CommentLike[]
    review_likes  ReviewLike[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
